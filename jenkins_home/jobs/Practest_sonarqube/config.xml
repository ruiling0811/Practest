<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3536.vb_8a_6628079d5">
    <script>pipeline {
    agent any
    stages {
        stage (&apos;Checkout&apos;) {
            steps {
                git branch:&apos;main&apos;, url: &apos;https://github.com/ruiling0811/Practest.git&apos;
            }
        }
    stage(&apos;Code Quality Check via SonarQube&apos;) {
        steps {
            script {
                def scannerHome = tool &apos;SonarQube&apos;;
                    withSonarQubeEnv(&apos;SonarQube&apos;) {
                    sh &quot;${tool(&quot;SonarQube&quot;)}/bin/sonar-scanner \
                    -Dsonar.projectKey=OWASP \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=http://172.18.0.4:9000 \
                    -Dsonar.login=sqp_9e4529115f7bcd08b4a96b04a3bb8e14fce6bb4e&quot;
                    }
                }
            }
        }
    }
    post {
        always {
            recordIssues enabledForFailure: true, tool: sonarQube()
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>